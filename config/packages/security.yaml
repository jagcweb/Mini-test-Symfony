security:
    encoders: #Con encoders declaramos cúal es el modelo que tiene un atributo a cifrar. Así como su algoritmo y su cost.
        App\Entity\User:
            algorithm: bcrypt # He elegido bcrypt porque es el más usado y el más recomendable
            cost: 4 #Indica las veces a cifrar la contraseña. Yo la he cifrado 4 veces.
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        users_in_memory: { memory: null }
        loginProvider: #Añadimos al proveedor del login la clase de la entidad y también el método de login 
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            form_login: #añadimos el formulario del login, con su ruta, su ruta a checkear y su proveedor de servicio.
                login_path: login
                check_path: login
                provider: loginProvider
            
            logout: #También añadimos el logout con su ruta y la ruta a redirigir post-logout
                path: /logout
                target: /

            anonymous: true
            lazy: true
            provider: users_in_memory

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/tasks, role: ROLE_USER }
        - { path: ^/create, role: ROLE_USER }
        - { path: ^/edit/, role: ROLE_USER }
        - { path: ^/delete/, role: ROLE_USER }